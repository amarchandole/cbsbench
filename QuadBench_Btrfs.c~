/*
 * Btrfs
 */

#include <stdio.h>
#include <fcntl.h>
#include <limits.h>
#include <time.h>
#include <libgen.h>
#include <unistd.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include "sha256.c"

unsigned char hash_tab[5000][32];
void calc_hash();
char *path = "/home/quad/Desktop/Benchmark/temp/";

/*
 * Lets us use the rdtsc instruction to get high_res time.
 * Thanks to libmicro
 */
uint64_t cpu_hz = 0;
uint64_t hrtime_t;

/*
 * Uses the rdtsc instruction to get high resolution (cpu
 * clock ticks) time. Only used for non Sun compiles.
 */
__inline__  unsigned long long
rdtsc(void)
{
	unsigned long long x;
	__asm__ volatile(".byte 0x0f, 0x31" : "=A" (x));
	return (x);
}

/*
 * Get high resolution time in nanoseconds. This is the version
 * used when NOT compiled for Sun systems. It uses rdtsc call to
 * get clock ticks and converts to nanoseconds
 */

uint64_t
gethrtime(void)
{
	uint64_t hrt;

	/* convert to nanosecs and return */
	hrt = ((rdtsc() * ((double)1000000000UL / cpu_hz)));
	return (hrt);
}

/*
 * Gets CPU clock frequency in MHz from cpuinfo file.
 * Converts to cpu_hz and stores in cpu_hz global uint64_t.
 * Only used for Non-Sun compiles.
 */
static uint64_t
parse_cpu_hz(void)
{
	/*
	 * Parse the following from /proc/cpuinfo.
	 * cpu MHz		: 2191.563
	 */
	FILE *cpuinfo;
	double hertz = -1;
	uint64_t hz;

	if ((cpuinfo = fopen("/proc/cpuinfo", "r")) == NULL) {
		printf("\nCPU_HZ_Parse failed\n");
	}
	while (!feof(cpuinfo)) {
		char buffer[80];

		fgets(buffer, 80, cpuinfo);
		if (strlen(buffer) == 0) continue;
		if (strncasecmp(buffer, "cpu MHz", 7) == 0) {
			char *token = strtok(buffer, ":");

			if (token != NULL) {
				token = strtok((char *)NULL, ":");
				hertz = strtod(token, NULL);
			}
			break;
		}
	}
	hz = hertz * 1000000;

	return (hz);
}

/*
 * Sets the cpu clock frequency variable or shuts down the
 * run if one is not found.
 */
void
clock_init(void)
{
	cpu_hz = parse_cpu_hz();
	if (cpu_hz <= 0) {
		printf("\nClock init ERROR\n");
	}
}

void print_hash(unsigned char hash[])
{
   int idx;
  
   printf(" ");
   for (idx=0; idx < 32; idx++)
     printf("%x",hash[idx]);
   printf("\n");
   
}


void calc_hash()
{
	    long long i;
    
	    for(i=0; i<500; i++)
	    {
	    	unsigned char hash[32];           
   		char *temp = (char *) malloc(50);
   		char *buff = (char *) malloc(50);
   		memset(buff, '0', 50);
   		char fid[128]; 	
		int ret;   		
   		int idx, j=0;
   		int c;
   		SHA256_CTX ctx;
   		
		temp = strcpy(temp, path);
		sprintf(fid, "%lld", i);
		temp = strcat(temp, fid);
		
		FILE *fp = fopen(temp, "rb"); // OPEN
		
		if(!fp){
			continue;
		}

		fscanf(fp, "%s", buff);
		printf("\n** %ld **", strlen(buff));

	        // Hashing procedure
	        sha256_init(&ctx); // Init
	        printf("\n %s \n", buff);
	        sha256_update(&ctx, buff, strlen(buff)); // Update
	        sha256_final(&ctx, hash); // Final
		strcpy(hash_tab[i], hash);
		print_hash(hash_tab[i]);
		
		fclose(fp);
	    }
}

/*****************************************************************************************************/
int 
main(int argc, char* argv)
{
	long long i=0;
	char fid[128]; 
	long long in;
	
	system("rm -r /home/quad/Desktop/Benchmark/temp/"); // Remove temporary Directory
	system("mkdir /home/quad/Desktop/Benchmark/temp/"); // Make temporary Directory
	
	clock_init();
	
	uint64_t fc = 0, fr = 0;
	uint64_t lc = 0, lr = 0;

	/*******************************************************************/			
	fc = gethrtime(); // START_CREATE
	for(i=0; i<500; i++) // CREATE_FILES_LOOP
	{
		char *temp = (char *) malloc(50);
		
		temp = strcpy(temp, path);
		sprintf(fid, "%lld", i);
		temp = strcat(temp, fid);
		
		FILE* fp = fopen(temp, "wb"); // OPEN
		fprintf(fp, "%lld", i); // WRITE		
		fclose(fp);	
		
		memset(fid, '0', strlen(fid));
		free(temp);
	}
	lc = gethrtime(); // END_CREATE

	/*******************************************************************/
         calc_hash();
         
	/*******************************************************************/	
	fr = gethrtime(); // START_READ
	for(i=0; i<500; i++) // READ_FILES_LOOP
	{
		char *temp = (char *) malloc(1000);
		char *
		int ret;
		memset(temp, '0', 1000);
		
		temp = strcpy(temp, path);
		
		int idx;
  
   		printf(" ");
		for (idx=0; idx < 32; idx++)
		    printf("%x",hash[idx]);
				
		//temp = strcat(temp, hash_tab[i]);
		//printf("\n PATH = %s ", temp);
		//ret  = open(temp, O_RDONLY); // OPEN
	}
	lr = gethrtime(); // END_READ
		
	printf("\n _______________________________");
	printf("\n| File_IO | 	  Time (us)  	|");
	printf("\n|_________|_____________________|\n");
	printf("| CREATE  |       %-13ld |\n", (lc-fc)/1000000);	
	printf("| READ    |       %-13ld |\n", (lr-fr)/1000000);
	printf("|_________|_____________________|\n");
	
	sleep(2);
}



